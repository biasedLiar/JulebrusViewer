@page "/person/{startId?}"

@using BlazorApp1.Models
@using ClassLibrary1
@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Components.SubComponent
@inject IDataAccess _data
@inject IJSRuntime JSRuntime
@inject IConfiguration _config
@attribute [StreamRendering]


<h3>Person</h3>
<!-- NOTE: the data-bs- attributes added as per the Bootstrap v5.1 instructions -->
<div id="TestCarousel" class="carousel slide" data-bs-ride="carousel" data-bs-wrap="true" data-interval="false" >
	<div class="carousel-inner">
        @foreach (var id in peopleIds)
            {
                
                <div class="carousel-item @(id == Int32.Parse(startId) ? "active" : "")">
                    <PersonStats personModel="@expandedPeople.Where(person => person.Id == id).ToList().First()"
                    avgCorrectModel="@avgCorrectGuesses.Where(person => person.Id == id).ToList().First()"
                    maxCorrectModel="@maxCorrectGuesses.Where(person => person.Id == id).ToList().First()"
                    ></PersonStats>
                </div>
            }
	</div>
	<button class="carousel-control-prev" type="button" data-bs-target="#TestCarousel" data-bs-slide="prev">
		<span class="carousel-control-prev-icon" aria-hidden="true"></span>
		<span class="visually-hidden">Previous</span>
	</button>
	<button class="carousel-control-next" type="button" data-bs-target="#TestCarousel" data-bs-slide="next">
		<span class="carousel-control-next-icon" aria-hidden="true"></span>
		<span class="visually-hidden">Next</span>
	</button>
</div>

@if (expandedPeople.Count() == 0)
{
    <p><em>Loading...</em></p>
} 

@code {
    [Parameter]
    public string? startId { get; set; }
    
    [Required]
    List<int> peopleIds = new List<int>();
    
    [Required]
    List<ExpandedPersonModel> expandedPeople = new List<ExpandedPersonModel>();
        
    [Required]
    List<PersonAvgCorrectGuessModel> avg_correct_guesses = new List<PersonAvgCorrectGuessModel>();
        
    [Required]
    List<NumbStatModel> avgCorrectGuesses = new List<NumbStatModel>();

    [Required]
    List<NumbStatModel> maxCorrectGuesses = new List<NumbStatModel>();

    

    [Required]
    List<PersonModel> people2 = new List<PersonModel>();
    protected override async Task OnInitializedAsync(){
        // Expanded Info
        string sql = "select *, " + 
            "(select COUNT(*) from event_person WHERE event_person.person_id = person.id) as event_count, " + 
            "(select COUNT(*) from gjett WHERE gjett.person_id = person.id) as gjett_count " + 
            "from person";
        expandedPeople = await _data.LoadData<ExpandedPersonModel, dynamic>(sql, new { }, _config.GetConnectionString("default")!);

        //Ids
        peopleIds = expandedPeople.Select(person => person.Id).ToList();
        
        //Riktige gjett
        string new_sql = "SELECT ROUND(AVG(gjett_count), 2) AS riktige_gjett, " +
                        "MAX(gjett_count) as max_riktige, riktig_gjett.person_id AS Id " +
                        "FROM ( " +
                            "SELECT COUNT(*) AS gjett_count, gjett.person_id as person_id, gjett.event_id as event_id " +
                            "FROM gjett WHERE gjett.brus_id = gjett.gjett " +
                            "GROUP BY gjett.person_id, gjett.event_id" +
                        ") as riktig_gjett " +
                        "GROUP BY person_id";
        List<PersonAvgCorrectGuessModel> avg_correct_guesses = await _data.LoadData<PersonAvgCorrectGuessModel, dynamic>(new_sql, new { }, _config.GetConnectionString("default")!);
        avgCorrectGuesses = avg_correct_guesses
            .Select(g => new NumbStatModel(g.Id, "Avg. Correct Guesses", g.Riktige_gjett, "Average correct guesses per event"))
            .ToList();

        maxCorrectGuesses = avg_correct_guesses
            .Select(g => new NumbStatModel(g.Id, "Max Correct Guesses", g.Max_riktige, "Max correct guesses in 1 event"))
            .ToList();

        /*
        maxCorrectGuesses = avg_correct_guesses
            .Select(g => new NumbStatModel(g.Id, "Max Correct Guesses", g.Riktige_gjett, "Max correct guesses in a event"))
            .ToList();
        */
    }

    protected override void OnParametersSet()
    {
        startId = startId ?? "1";
    }
    
}
